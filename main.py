from telethon import TelegramClient, events
import re

api_id = 23254800
api_hash = 'beed8ffad73a37683a059ee31b6d92f2'
session_name = 'forwarder'

tag_to_chat = {
    "3w500s1h": "@three_wallets_500",
    "3w1000s2h": "@three_wallets_1000",
    # –î–æ–±–∞–≤—å —Å—é–¥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π id, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # "3wXXXXXX": -1001234567890,
}

client = TelegramClient(session_name, api_id, api_hash)

@client.on(events.NewMessage(from_users='chainedge_solbot'))
async def handle_message(event):
    text = event.message.message

    # –ù–∞–π—Ç–∏ —Ç–µ–≥ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    tag_match = re.search(r'#\s*"?(3w\d+s\d+h)"?', text)
    if not tag_match:
        print("‚õî –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return

    tag = tag_match.group(1)
    target_chat = tag_to_chat.get(tag)

    if not target_chat:
        print(f"‚õî –ù–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç—ç–≥–∞ #{tag}. –ü—Ä–æ–≤–µ—Ä—å tag_to_chat.")
        return

    parts = text.split("\n")
    try:
        # –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ (—Å—Ç—Ä–æ–∫–∞ —Å ‚û°)
        start_idx = next(i for i, line in enumerate(parts) if line.strip().startswith("‚û°"))
        # –ù–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å [View Tx])
        end_idx = max(i for i, line in enumerate(parts) if "[View Tx]" in line) + 1
        filtered_lines = parts[start_idx:end_idx]

        # --- –£–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫ ‚úÇ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞ ---
        if len(filtered_lines) > 1:
            address_line = filtered_lines[1].replace("‚úÇ", "").strip()
            # –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ –º–æ–Ω–æ—à–∏—Ä–Ω–æ–≥–æ –∫–æ–¥–∞
            filtered_lines[1] = f"`{address_line}`"

        # --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å [View Tx] –≤ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å ---
        entities = event.message.entities or []
        urls_by_offset = {}
        for entity in entities:
            if hasattr(entity, 'url') and hasattr(entity, 'offset') and hasattr(entity, 'length'):
                urls_by_offset[entity.offset] = (entity.length, entity.url)

        def insert_links(line, offset_start):
            result = ""
            i = 0
            while i < len(line):
                global_offset = offset_start + i
                if global_offset in urls_by_offset:
                    length, url = urls_by_offset[global_offset]
                    text = line[i:i+length]
                    result += f"[{text}]({url})"
                    i += length
                else:
                    result += line[i]
                    i += 1
            return result

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –¥–µ–ª–∞–µ–º [View Tx] –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        offset = sum(len(x)+1 for x in parts[:start_idx])
        new_filtered_lines = []
        for line in filtered_lines:
            new_filtered_lines.append(insert_links(line, offset))
            offset += len(line) + 1
        filtered_lines = new_filtered_lines

        # --- DexScreener: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ ---
        dex_idx = next((i for i, line in enumerate(parts) if "[DexScreener]" in line), None)
        dex_line = ""
        if dex_idx is not None:
            # –≤—ã—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ [DexScreener]
            dex_line = "[DexScreener]"
            filtered_lines.append(dex_line)

        # --- –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ GMGN ---
        if len(filtered_lines) > 1:
            token_address = filtered_lines[1].replace("`", "")
            gmgn_link = f"[GMGN](https://gmgn.ai/sol/token/{token_address})"
            filtered_lines.append(gmgn_link)

        cleaned_message = "\n".join(filtered_lines).strip()
        await client.send_message(target_chat, cleaned_message, parse_mode='markdown')
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_chat} –ø–æ —Ç–µ–≥—É #{tag}")

    except Exception as e:
        print("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

# –î–ª—è –ø–æ–∏—Å–∫–∞ id –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∂–¥–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
@client.on(events.NewMessage)
async def print_chat_info(event):
    sender = await event.get_chat()
    print(f"[DEBUG] title={getattr(sender, 'title', None)}, id={getattr(sender, 'id', None)}, username={getattr(sender, 'username', None)}")

print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @chainedge_solbot...")
client.start()
client.run_until_disconnected()
