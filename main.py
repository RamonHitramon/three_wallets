from telethon import TelegramClient, events
import re

api_id = 23254800
api_hash = 'beed8ffad73a37683a059ee31b6d92f2'
session_name = 'forwarder'

tag_to_chat = {
    "3w500s1h": "@three_wallets_500",
    "3w1000s2h": "@three_wallets_1000",
    "3wvedao": -2524347290,
}

client = TelegramClient(session_name, api_id, api_hash)

def extract_token_address(lines):
    for i, line in enumerate(lines):
        if line.strip().startswith("‚û°"):
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ (–≥–¥–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç) ‚Äî —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ
            if i+1 < len(lines):
                ca = lines[i+1].replace("‚úÇ", "").strip()
                ca = re.sub(r'[^\w\d]+', '', ca)  # —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
                return ca
    return None

def insert_links(lines, token_address):
    links = f"[GMGN](https://gmgn.ai/sol/token/{token_address}) [DexScreener](https://dexscreener.com/solana/{token_address}) [AXIOM](https://axiom.trade/t/{token_address}/@3wallets)"
    for i, line in enumerate(lines):
        if "üíß Total Liquidity" in line:
            # –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            return lines[:i+1] + ["", links, ""] + lines[i+1:]
    return lines + ["", links, ""]

def clean_message(text):
    lines = text.splitlines()
    # –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä —Å–≤–µ—Ä—Ö—É
    while lines and (lines[0].startswith("Alert Count:") or lines[0].startswith("# ") or lines[0].startswith("Time") or lines[0].startswith("Transactions within") or lines[0].strip() == ""):
        lines.pop(0)
    # –ù–∞—Ö–æ–¥–∏–º ‚û°
    start_idx = next((i for i, l in enumerate(lines) if l.strip().startswith('‚û°')), 0)
    # –ë–ª–æ–∫ —Ç–æ–∫–µ–Ω–∞ ‚Äî –¥–æ Smart Money Transactions
    end_idx = next((i for i, l in enumerate(lines) if "Smart Money Transactions:" in l), len(lines))
    token_block = lines[start_idx:end_idx]
    # –ö–æ–Ω—Ç—Ä–∞–∫—Ç (—Å—Ç—Ä–æ–∫–∞ –ø–æ–¥ ‚û°) ‚Äî –æ—á–∏—â–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —Ç–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç!
    token_block = [l.replace("‚úÇ", "") for l in token_block]
    token_address = extract_token_address(token_block)
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å –¥–æ —Å—Å—ã–ª–æ–∫/–º—É—Å–æ—Ä–∞
    if token_address:
        token_block = [l for l in token_block if not re.search(r"\[DexScreener]", l) and "[chainEDGE]" not in l and "[Twitter]" not in l and "[Website]" not in l and "GMGN" not in l]
        token_block = insert_links(token_block, token_address)
    # –ü–∞—Ä—Å–∏–º Smart Money Transactions
    smt_idx = next((i for i, l in enumerate(lines) if "Smart Money Transactions:" in l), None)
    result = token_block
    if smt_idx is not None:
        smt_block = lines[smt_idx:]
        # [View Tx] -> [View Tx](URL)
        for idx, l in enumerate(smt_block):
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å [View Tx](...), –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if re.search(r'\[View Tx\]\(https?://', l):
                pass
            # –ï—Å–ª–∏ [View Tx] –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≥–¥–µ-—Ç–æ —Å—Å—ã–ª–∫–∞ ‚Äî —Å–æ–±–∏—Ä–∞–µ–º
            elif '[View Tx]' in l:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ [View Tx]
                m = re.search(r'\[View Tx\]\s*(https?://[^\s\)]+)', l)
                if m:
                    url = m.group(1)
                    l = re.sub(r'\[View Tx\]\s*https?://[^\s\)]+', f'[View Tx]({url})', l)
                else:
                    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≥–¥–µ-—Ç–æ –µ—â—ë, –ø–æ–¥—Ü–µ–ø–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é
                    m2 = re.search(r'(https?://[^\s\)]+)', l)
                    if m2:
                        url = m2.group(1)
                        l = l.replace('[View Tx]', f'[View Tx]({url})')
            smt_block[idx] = l.replace('‚úÇ', '').strip()
        result += smt_block
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    clean_result = []
    for line in result:
        if not (clean_result and clean_result[-1] == "" and line == ""):
            clean_result.append(line)
    return '\n'.join(clean_result).strip()

@client.on(events.NewMessage(from_users='chainedge_solbot'))
async def handle_message(event):
    text = event.message.message
    tag_match = re.search(r'#\s*"?(3w\w+)"?', text)
    if not tag_match:
        print("‚õî –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    tag = tag_match.group(1)
    target_chat = tag_to_chat.get(tag)
    if not target_chat:
        print(f"‚õî –ù–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç—ç–≥–∞ #{tag}. –ü—Ä–æ–≤–µ—Ä—å tag_to_chat.")
        return
    cleaned_message = clean_message(text)
    await client.send_message(target_chat, cleaned_message, parse_mode="markdown")
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_chat} –ø–æ —Ç–µ–≥—É #{tag}")

@client.on(events.NewMessage)
async def print_chat_info(event):
    sender = await event.get_chat()
    print(f"[DEBUG] title={getattr(sender, 'title', None)}, id={getattr(sender, 'id', None)}, username={getattr(sender, 'username', None)}")

print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @chainedge_solbot...")
client.start()
client.run_until_disconnected()
