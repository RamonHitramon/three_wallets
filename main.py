from telethon import TelegramClient, events
import re

api_id = 23254800
api_hash = 'beed8ffad73a37683a059ee31b6d92f2'
session_name = 'forwarder'

tag_to_chat = {
    "3w500s1h": "@three_wallets_500",
    "3w1000s2h": "@three_wallets_1000",
    # –î–æ–±–∞–≤—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

client = TelegramClient(session_name, api_id, api_hash)

@client.on(events.NewMessage(from_users='chainedge_solbot'))
async def handle_message(event):
    text = event.message.message

    tag_match = re.search(r'#\s*"?(3w\d+s\d+h)"?', text)
    if not tag_match:
        print("‚õî –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return

    tag = tag_match.group(1)
    target_chat = tag_to_chat.get(tag)

    if not target_chat:
        print(f"‚õî –ù–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç—ç–≥–∞ #{tag}. –ü—Ä–æ–≤–µ—Ä—å tag_to_chat.")
        return

    parts = text.split("\n")
    try:
        # –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ (—Å—Ç—Ä–æ–∫–∞ —Å ‚û°)
        start_idx = next(i for i, line in enumerate(parts) if line.strip().startswith("‚û°"))
        # –ù–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å [View Tx])
        end_idx = max(i for i, line in enumerate(parts) if "[View Tx]" in line) + 1
        filtered_lines = parts[start_idx:end_idx]

        # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞ (–æ–±—ã—á–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ ‚û°)
        token_line_idx = start_idx + 1
        token_address = parts[token_line_idx].strip() if len(parts) > token_line_idx else ""

        # –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –º–æ–Ω–æ—à–∏—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if token_address:
            filtered_lines[1] = f"`{token_address}`"  # –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞–∫ –∫–æ–¥-–±–ª–æ–∫

        # –í—ã—Ä–µ–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ [DexScreener], –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—ë
        dex_idx = next((i for i, line in enumerate(parts) if "[DexScreener]" in line), None)
        dex_line = parts[dex_idx] if dex_idx is not None else ""
        # –£–±—Ä–∞—Ç—å –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ [DexScreener]
        if dex_idx is not None:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ [DexScreener]
            filtered_lines.append(dex_line)

        # –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É GMGN –Ω–∞ —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–∫–µ–Ω)
        if token_address:
            gmgn_link = f"[GMGN](https://gmgn.ai/sol/token/{token_address})"
            filtered_lines.append(gmgn_link)

        cleaned_message = "\n".join(filtered_lines).strip()
        await client.send_message(target_chat, cleaned_message, parse_mode='markdown')
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_chat} –ø–æ —Ç–µ–≥—É #{tag}")

    except Exception as e:
        print("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @chainedge_solbot...")
client.start()
client.run_until_disconnected()
